// automatically generated by the FlatBuffers compiler, do not modify
extern crate flatbuffers;
use std::mem;
use std::cmp::Ordering;
use self::flatbuffers::{EndianScalar, Follow};
use super::*;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ERR_TYPE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ERR_TYPE: i8 = 5;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ERR_TYPE: [ErrType; 6] = [
  ErrType::ErrConnection,
  ErrType::ErrBadRequest,
  ErrType::ErrInternal,
  ErrType::ErrMessage,
  ErrType::ErrAuth,
  ErrType::ErrACL,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct ErrType(pub i8);
#[allow(non_upper_case_globals)]
impl ErrType {
  pub const ErrConnection: Self = Self(0);
  pub const ErrBadRequest: Self = Self(1);
  pub const ErrInternal: Self = Self(2);
  pub const ErrMessage: Self = Self(3);
  pub const ErrAuth: Self = Self(4);
  pub const ErrACL: Self = Self(5);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 5;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::ErrConnection,
    Self::ErrBadRequest,
    Self::ErrInternal,
    Self::ErrMessage,
    Self::ErrAuth,
    Self::ErrACL,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::ErrConnection => Some("ErrConnection"),
      Self::ErrBadRequest => Some("ErrBadRequest"),
      Self::ErrInternal => Some("ErrInternal"),
      Self::ErrMessage => Some("ErrMessage"),
      Self::ErrAuth => Some("ErrAuth"),
      Self::ErrACL => Some("ErrACL"),
      _ => None,
    }
  }
}
impl std::fmt::Debug for ErrType {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for ErrType {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = unsafe {
      flatbuffers::read_scalar_at::<i8>(buf, loc)
    };
    Self(b)
  }
}

impl flatbuffers::Push for ErrType {
    type Output = ErrType;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        unsafe { flatbuffers::emplace_scalar::<i8>(dst, self.0); }
    }
}

impl flatbuffers::EndianScalar for ErrType {
  #[inline]
  fn to_little_endian(self) -> Self {
    let b = i8::to_le(self.0);
    Self(b)
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(self) -> Self {
    let b = i8::from_le(self.0);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for ErrType {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for ErrType {}
